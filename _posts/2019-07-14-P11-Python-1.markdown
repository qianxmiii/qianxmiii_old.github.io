---
layout: post
title:  "Python学习 - 基础版"
date:   2019-07-14 10:48:00 +0800
categories: posts learn python
header-img: img/post/P7-headimg.jpeg
tags:
    - Python
pid: P11
---

## Python基础

### Python 简介

* 两个版本：2.x 3.x
* 配置环境变量 Path



以下针对于2.x版

### 一、基础
#### 输出：print语句
可以向屏幕上输出指定的文字
注：当我们在Python交互式环境下编写代码时，>>>是Python解释器的提示符，不是代码的一部分。
print语句也可以跟上多个字符串，用逗号`,`隔开，就可以连成一串输出

<pre class="prettyprint">
>>> print 'The quick brown fox', 'jumps over', 'the lazy dog'
The quick brown fox jumps over the lazy dog
</pre>
#### 输入：
<pre class="prettyprint">
# 等待输入 可选输入提示语
# raw_input()读取的内容永远以字符串的形式返回
name = raw_input('please enter your name: ')
print 'hello,', name

# 结果
please enter your name: Michael
hello, Michael
</pre>



#### 注释
`#`开头

#### 转义字符
`\n` 表示换行
`\t` 表示一个制表符
`\\`  表示 \ 字符本身

row
* 单行： 
</pre> python
r'\(~_~)/ \(~_~)/'
</pre>
* 多行：'''...'''
</pre> python
r'''Line 1
Line 2
Line 3'''

</pre>

#### Unicode
`u'...'`

</pre> python
print u'中文'
</pre>

如果中文字符串在Python环境下遇到 UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释

</pre> python 
# Python解释器，按照UTF-8编码读取源代码
# -*- coding: utf-8 -*- 
</pre>
<br>

#### 格式化输出

格式化方式同C语言一致

`%s`表示用字符串替换，`%d`表示用整数替换，`%f`表示用浮点数替换，`%x`表示用十六进制替换，

<pre class="prettyprint">
>>> 'Hello, %s' % 'world'
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'

# 遇到%需要转义
>>> 'growth rate: %d %%' % 7
'growth rate: 7 %'
</pre>

###  二、数据类型

####  A、基础类型

整数、浮点数、字符串、布尔值（True/False and/or/not）、空值（None）
<font color = RED>**Python 是动态语言**</font>

#### 布尔型
Python把0、空字符串''和None看成 False，其他数值和非空字符串都看成 True
`and` 和 `or` 运算的一条重要法则：**短路计算**。
即：Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。



####  B、集合类型
#### （一）list 有序集合

动态语言 可包含各种数据类型，可变。

<pre class="prettyprint">
# 用中括号[]
t = ['Adam', 123, True]

# list元素也可以是另一个list，相当于二维数组
>>> s = ['python', 'java', ['asp', 'php'], 'scheme']
>>> len(s)
4
# 等同于 
>>> p = ['asp', 'php']
>>> s = ['python', 'java', p, 'scheme']

print p[1]
# 或
print s[2][1]
# 输出
'php'
</pre>

**a) 输出**

<pre class="prettyprint">
L = ['Adam', 123, True]
# 通过索引访问 索引是从0开始
print L[0]、L[1]、L[2]
# 倒序
print L[-1]、L[-2]

# 越界
print L[3]
# 输出
IndexError: list index out of range
</pre>

**b ) 添加元素**
<pre class="prettyprint">
L.append('Paul') # 添加至尾部
L.insert(0, 'Paul')  # 添加至指定索引（第一个位置）处
</pre>

**c ) 删除元素**
<pre class="prettyprint">
L.pop()  # 删掉最后一个元素
L.pop(2) # 删掉指定索引处的元素
</pre>

**d) 替换元素**
<pre class="prettyprint">
L[2] = 'Paul' 
# 或 
L[-1] = 'Paul'
</pre>
<br/>

#### （二）tuple 元组 有序列表
创建完毕，不可修改

**a) 创建**

<pre class="prettyprint">
# 使用小括号 ()
t = ('Adam', 'Lisa', 'Bart')
</pre>
<pre class="prettyprint">
t = (1,) # 单元素需多加一个逗号，避免歧义 与整数1相同
</pre>
<pre class="prettyprint">
# tuple不可变，但可以包含List，元素List可以变，但是tuple对List的指向没有变
>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])
</pre>
**b) 访问**
<pre class="prettyprint">
# 同list一致
t[0] t[-1]
</pre>
**c) 更新**
由于tuple一旦创建完毕，就不能修改了，所以不能更新
<pre class="prettyprint">
t[0] = 'Paul'
# 报错
TypeError: 'tuple' object does not support item assignment
</pre>
<br>
#### （三）dict字典
key - value
花括号 `{}` 表示这是一个dict，然后按照 **key: value**

**a ) 定义**
<pre class="prettyprint">
d = {'Adam': 95, 'Lisa': 85, 'Bart': 59}
# len()计算任意集合的大小
>>> len(d)
3
</pre>
**b )  特点**

- **查找速度快** 按key查找，key不能重复
- **存储的key-value序对是没有顺序**
- **key 的元素必须不可变**

如

<pre class="prettyprint">
# 使用List
d = {
    {'1','2'} : '1'
}
# 由于List是可变的，报如下错误
TypeError: unhashable type: 'set'

# 使用tuple
d = {
    ('1','2') : '1'
}
# 由于tuple的每个元素都是不可变对象，所以不报错
</pre>

**c )  访问**

* 使用key:`d[key]`

<pre class="prettyprint">
d = {
    'Adam': 95,
    'Lisa': 85,
    'Bart': 59
}
>>> print d['Adam']
</pre>

若不存在会报`KeyError`，避免这种情况，先进行判断
<pre class="prettyprint">
# 判断key是否存在
if 'Paul' in d:
    print d['Paul']
</pre>

* 使用key:`d.get(key)`
<pre class="prettyprint">
>>> print d.get('Bart')
59
# 在Key不存在的时候，返回None
>>> print d.get('Paul')
None
</pre>

**d )  更新**
使用`d[key] = value`

<pre class="prettyprint">
# 修改值
d['Bart'] = 60
# 删除key值为'Bob'，同时删除对应的value
d.pop('Bob')
</pre>

**e )  遍历**

<pre class="prettyprint">
>>> d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
>>> for key in d:
    print key 
Lisa
Adam
Bart
</pre>
<br>
#### （四）set 无序集合
set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像

**a )  定义**

<pre class="prettyprint">
s = set(['A', 'A', 'B', 'C'])

# 自动过滤重复元素
>>> print s
set(['A', 'C', 'B'])
</pre>

**b )  特点**

- **判断一个元素是否在set中速度很快** 判断一个元素是否在set中速度很快
- **set存储的元素是无序的**
- **set存储的元素必须不可变**

<pre class="prettyprint">
# 示例
  weekdays = set(['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'])
x = 'MON' # 用户输入的字符串
  if x in weekdays:
      print 'input ok'
  else:
      print 'input error'
</pre>

**c )  访问**

用`in`判断一个元素是否在set中

（区分大小写）

<pre class="prettyprint">
>>> s = set(['Adam', 'Lisa', 'Bart', 'Paul'])
>>> 'Bart' in s
True
>>> 'Bill' in s
False
</pre>
**d )  遍历**

<pre class="prettyprint">
s = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])
for x in s:
    print x[0],':',x[1]
</pre>

**e )  更新**
* 添加元素
`add(value)`
<pre class="prettyprint">
>>> s = set([1, 2, 3])
>>> s.add(4)
>>> print s
set([1, 2, 3, 4])
</pre>

* 删除元素
`remove(value)`
<pre class="prettyprint">
# 如果删除的元素不存在set中，remove()会报错，最好先判断是否存在set中
>>> s = set([1, 2, 3, 4])
>>> s.remove(4)
>>> print s
set([1, 2, 3])
</pre>

**f )  迭代**

`d.values()`:迭代 dict 对象的value
`d.itervalues()` 不把dict转换成list，更节省内存

<pre class="prettyprint">
d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
print d.values()
# [85, 95, 59]
for v in d.values():
    print v
# 85
# 95
# 59
</pre>
`items()` 方法把dict对象转换成了包含tuple的list

`iteritems()`不把dict转换成list，更节省内存

<pre class="prettyprint">
>>> for key, value in d.items():
    print key, ':', value
    
Lisa : 85
Adam : 95
Bart : 59
</pre>

###  三、控制语句
#### （一）if-else 语句
<pre class="prettyprint">
age = 20
# : 表示代码块开始
if age >= 18:
    print 'adult'
else:
    print 'teenager'
</pre>

#### （二）if-elif-else 语句
<pre class="prettyprint">
age = 20
# : 表示代码块开始
if age >= 18:
    print 'adult'
elif age >= 6:
    print 'teenager'
elif age >= 3:
    print 'kid'
else:
    print 'baby'
</pre>

#### （三）for 循环语句
<pre class="prettyprint">
age = 20
# : 表示代码块开始
L = ['Adam', 'Lisa', 'Bart']
for name in L:
    print name
</pre>

#### （四）while 循环语句
<pre class="prettyprint">
# 计算1至100的整数和
sum = 0
x = 1
while True:
    sum = sum + x
    x = x + 1
    if x > 100:
# break 跳出循环
        break
print sum
</pre>
`continue` 语句
<pre class="prettyprint">
for x in L:
    if x < 60:
# continue 跳过后续循环代码，继续下一次循环
        continue
    sum = sum + x
    n = n + 1
</pre>
#### 多重循环
<pre class="prettyprint">
for x in ['A', 'B', 'C']:
    for y in ['1', '2', '3']:
        print x + y
</pre>



<br>

###  四、函数
#### 调用函数
* **abs (100)**  绝对值
* **cmp(x, y)**  比较函数

比较函数`cmp(x, y)`就需要两个参数，如果`x<y`，返回`-1`，如果`x==y`，返回`0`，如果`x>y`，返回`1`

<pre class="prettyprint">
>>> cmp(1, 2)
-1
>>> cmp(2, 1)
1
>>> cmp(3, 3)
0
</pre>

* **int()** 转换为整数
* **str()** 转换为str
* **sum()** 可接受一个list作为参数，返回list所有元素之和
* **range() ** 创建一个数列

<pre class="prettyprint">
>>> range(1, 101)
[1, 2, 3, ..., 100]
</pre>

#### 编写函数
使用`def`关键字

<pre class="prettyprint">
# 求绝对值
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
</pre>

如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None。**return None可以简写为return。**

**空函数**

<pre class="prettyprint">
def nop():
    pass
</pre>

函数可返回多个值，其实返回的是一个`tuple`

<pre class="prettyprint">
import math
def move(x, y, step, angle):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny
</pre>

**使用递归函数需要注意防止栈溢出**

函数参数包括：必选参数、默认参数、可变参数、关键字参数

**a )  默认参数**

<pre class="prettyprint">
def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
# 如果不传，默认用自带的参数
>>> power(5)
25
# 如果传了，则用传入的参数
# 必选参数必须在前，默认参数在后
>>> power(5,3)
125
</pre>
**b )  可变参数**
可变参数的名字前面有个 ***** 号，我们可以传入0个、1个或多个参数给可变参数：
注：其实是将传入的参数组装成一个`tuple `

<pre class="prettyprint">
def fn(*args):
    print args

# 计算平均数
def average(*args):
    sum = 0.0
    if len(args) == 0:
        return sum
    for x in args:
        sum = sum + x
    return sum / len(args)
print average()
print average(1, 2)
print average(1, 2, 2, 3, 4)
</pre>
**c )  关键字参数**
可变参数的名字前面有个 ***** 号，关键字参数允许你传入0个或任意个含参数名的参数
注：将传入的参数组装成一个`dict `

<pre class="prettyprint">
def person(name, age, **kw):
    print 'name:', name, 'age:', age, 'other:', kw
    
>>> person('Michael', 30)
name: Michael age: 30 other: {}

>>> person('Bob', 35, city='Beijing')
name: Bob age: 35 other: {'city': 'Beijing'}
>>> person('Adam', 45, gender='M', job='Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}
</pre>

**d ) 参数组合**
参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数
<pre class="prettyprint">
def func(a, b, c=0, *args, **kw):
    print 'a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw
    
>>> func(1, 2)
a = 1 b = 2 c = 0 args = () kw = {}
>>> func(1, 2, c=3)
a = 1 b = 2 c = 3 args = () kw = {}
>>> func(1, 2, 3, 'a', 'b')
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
>>> func(1, 2, 3, 'a', 'b', x=99)
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}
</pre>

###  五、高级特性
#### （一）切片
<pre class="prettyprint">
L = ['Adam', 'Lisa', 'Bart', 'Paul']
# 取前3个元素
# 从索引0开始取，直到索引3为止，但不包括索引3
>>> L[0:3] 
# 或0可省略
>>> L[:3]
['Adam', 'Lisa', 'Bart']

>>> L[-2:]
['Bart', 'Paul']
>>> L[-2:-1]
['Bart']

# 全部元素
>>> L[:]
['Adam', 'Lisa', 'Bart', 'Paul']

# 第三个参数 每N个取1个
>>> L[::2]
['Adam', 'Bart']
</pre>

#### （二）迭代

**a) 迭代**

迭代`dict`

<pre class="prettyprint">
# 迭代value
for value in d.itervalues()
# 迭代key和value
for k, v in d.iteritems()
</pre>

**b) 索引迭代**

`enumerate()` 可拿到索引

<pre class="prettyprint">
>>> L = ['Adam', 'Lisa', 'Bart', 'Paul']
>>> for index, name in enumerate(L):
    print index, '-', name 
0 - Adam
1 - Lisa
2 - Bart
3 - Paul
</pre>
**c) 判断是否可迭代**
判断一个对象是可迭代对象

<pre class="prettyprint">
# collections模块的Iterable类型
>>> from collections import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代
True
>>> isinstance([1,2,3], Iterable) # list是否可迭代
True
>>> isinstance(123, Iterable) # 整数是否可迭代
False
</pre>

#### （三）列表生成式
<pre class="prettyprint">
# 生成[1x1, 2x2, 3x3, ..., 10x10]
>>> [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# 加上if判断
>>> [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]

>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
</pre>

<pre class="prettyprint">
# 列出当前目录下的所有文件和目录名
>>> import os # 导入os模块，模块的概念后面讲到
>>> [d for d in os.listdir('.')] # os.listdir可以列出文件和目录
['.emacs.d', '.ssh', '.Trash', 'Adlm', 'Applications', 'Desktop', 'Documents', 'Downloads', 'Library', 'Movies', 'Music', 'Pictures', 'Public', 'VirtualBox VMs', 'Workspace', 'XCode']
</pre>

``` python
d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
def generate_tr(name, score):
    if score < 60:
        return '<tr><td>%s</td><td style="color:red">%s</td></tr>' % (name, score)
    return '<tr><td>%s</td><td>%s</td></tr>' % (name, score)

tds = [generate_tr(name,score) for name, score in d.iteritems()]
print '<table border="1">'
print '<tr><th>Name</th><th>Score</th><tr>'
print '\n'.join(tds)
print '</table>'

```


#### （四）生成器

``` python
>>> L = [x * x for x in range(10)]
>>> L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x104feab40>

# generator的next()
>>> g.next()
0
>>> g.next()
1
>>> g.next()

>>> g = (x * x for x in range(10))
>>> for n in g:
        print n
```

#### 条件过滤

<pre class="prettyprint">
>>> [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]
</pre>

#### 多层表达式
<pre class="prettyprint">
>>> [m + n for m in 'ABC' for n in '123']
['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']
</pre>

#### 捕获异常

try...except...

<pre class="prettyprint">
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO
</pre>



###  六、常用函数
##### a)  range()
range(stop) 
则从0开始
range(start, stop, [step]) 

* start - 开始计数参数 默认为0
* stop - 结束计数参数 （**顾头不顾尾**）
* step - 差值

<pre class="prettyprint">
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> range(1, 11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> range(0, 30, 5)
[0, 5, 10, 15, 20, 25]
>>> range(0, 10, 3)
[0, 3, 6, 9]
>>> range(0, -10, -1)
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
>>> range(0)
[]
>>> range(1, 0)
[]
</pre>

##### b)  strip()

`s.strip(rm)`  删除 s 字符串中开头、结尾处的 rm 序列的字符。

当rm为空时，默认删除空白符（包括'\n', '\r', '\t', ' ')



参考教程：[初识Python-廖雪峰教程][python]

[python]:https://www.imooc.com/learn/177